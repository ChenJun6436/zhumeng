<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jf.projects.zmt.dao.SRoleMapper">
  <resultMap id="BaseResultMap" type="com.jf.projects.zmt.model.SRole">
    <id column="Id" jdbcType="VARCHAR" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="type_id" jdbcType="VARCHAR" property="typeId" />
    <result column="department_id" jdbcType="VARCHAR" property="departmentId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="creator" jdbcType="VARCHAR" property="creator" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="code" jdbcType="VARCHAR" property="code" />
  </resultMap>
  
  <resultMap id="DepartmentListRankMap" type="com.jf.projects.zmt.vo.role.RoleListVo">
    <result column="roleId" property="roleId" jdbcType="VARCHAR" />
    <result column="roleName" property="roleName" jdbcType="VARCHAR" />
    <result column="departmentId" property="departmentId" jdbcType="VARCHAR" />
    <result column="departmentName" property="departmentName" jdbcType="VARCHAR" />
    <result column="createTime" property="createTime" jdbcType="VARCHAR" />
    <result column="creator" property="creator" jdbcType="VARCHAR" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <association property="userCount"   column="roleId" select="findUserCountByRoleId" />
    <association property="resources"   column="roleId" select="findResourcesByRoleId" />
  </resultMap>
  
   <!-- 根据角色ID获取资源数据 -->
  <select id="findResourcesByRoleId" parameterType="java.lang.String" resultType="com.jf.projects.zmt.vo.resource.ResourceVo">
    select 
    t.resource_id as resourceId,m.name as resourceName,t.type,m.parent_id as parentId,m.code as code
    from and_role_resource t
    left join s_resource m on m.id  = t.resource_id
    where t.role_id = #{roleId}
  </select>
  
   <!--获取角色下用户数量 -->
   <select id="findUserCountByRoleId" resultType="java.lang.Integer" parameterType="java.lang.String" >
    select count(t.id) as userCount 
    from  and_user_role t
   	where t.role_id = #{roleId}  
  </select>
  
  <sql id="Base_Column_List">
    Id, name, type_id, department_id, create_time, creator, update_time, status,code
  </sql>
  
   <!-- 根据部门ID及角色名称查询角色数据 -->
   <select id="findRoleList" parameterType="java.lang.String" resultMap="DepartmentListRankMap">
    select t.Id as roleId, t.name as roleName,t.department_id as departmentId,
    m.name as departmentName,t.create_time as createTime,t.creator,t.code
    from s_role t
    left join s_department m on m.id =t.department_id
    where t.status = 'enable' and t.type_id = #{typeId} 
    <if test="departmentId != null">
      and t.department_id = #{departmentId}
    </if>
    <if test="roleId != null">
      and t.Id =#{roleId}
    </if>
    <if test="start != null">
      limit #{start},#{length}
    </if>
   </select>
  
   <!-- 根据部门ID及角色名称查询角色数据 -->
   <select id="findByNameAndDepartmentId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from s_role
    where department_id = #{departmentId} and name =#{roleName}  and status = 'enable'
  </select>
  
  <!-- 根据部门ID获取角色数据 -->
   <select id="findByDepartmentId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from s_role
    where status = 'enable'
    <if test="departmentId != null">
      and  department_id = #{departmentId} 
    </if>
  </select>
  
  <select id="findById" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from s_role
    where Id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="delete" parameterType="java.lang.String">
    delete from s_role
    where Id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.jf.projects.zmt.model.SRole"  keyProperty="id" useGeneratedKeys="true">
    insert into s_role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      Id,
      <if test="name != null">
        name,
      </if>
      <if test="typeId != null">
        type_id,
      </if>
      <if test="departmentId != null">
        department_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="creator != null">
        creator,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="code != null">
        code,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=VARCHAR},
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="typeId != null">
        #{typeId,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null">
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="update" parameterType="com.jf.projects.zmt.model.SRole">
    update s_role
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="typeId != null">
        type_id = #{typeId,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null">
        department_id = #{departmentId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null">
        creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        code = #{code,jdbcType=VARCHAR},
      </if>
    </set>
    where Id = #{id,jdbcType=VARCHAR}
  </update>
  <!-- 通过userId查找角色名字 -->
  	<select id="findRolesByUseId" resultType="java.lang.String" parameterType="java.lang.String">
		SELECT
		s_role.name as roleName
		FROM
		s_role,
		and_user_role
		WHERE
		s_role.Id = and_user_role.role_id
		AND and_user_role.user_id=#{userId}
	</select>
	
	<!-- 根据用户id获取角色 -->
	<select id="findRoleByUserId" parameterType="java.lang.String" resultMap="BaseResultMap">
		select 
		    r.Id,
			r.`name`,
			r.type_id,
			r.department_id,
			r.create_time,
			r.creator,
			r.update_time,
			r.STATUS,
			r.CODE
	    from s_role r
	    LEFT JOIN and_user_role aur ON aur.role_id = r.Id
	    where aur.user_id = #{userId,jdbcType=VARCHAR}
	</select>
	
	<!-- 根据用户id获取角色 -->
	<select id="findRoleByCode" parameterType="java.lang.String" resultMap="BaseResultMap">
		select 
		    r.Id,
			r.`name`,
			r.type_id,
			r.department_id,
			r.create_time,
			r.creator,
			r.update_time,
			r.STATUS,
			r.CODE
	    from s_role r
	    where r.`code` = #{code,jdbcType=VARCHAR}
	</select>
</mapper>